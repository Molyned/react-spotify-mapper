{"version":3,"sources":["components/allArtistMap.js","App.js","serviceWorker.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","require","config","path","__dirname","process","REACT_APP_MAP_KEY","AllArtistMap","setPlotConfig","mapboxAccessToken","console","log","justify","data","type","lat","lon","name","mode","marker","size","text","hoverinfo","layout","width","height","hovermode","mapbox","bearing","center","pitch","zoom","style","showlegend","title","Component","App","className","Boolean","window","location","hostname","match","axios","defaults","baseURL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAGMA,E,MAAOC,GAAsBC,KACnCC,EAAQ,IAAUC,OAAO,CAACC,KAAMC,EAAY,UAE5BC,8CAAYC,kBAA5B,IAGqBC,E,iLAOjB,OALAP,IAAOQ,cAAc,CACnBC,kBAAmB,8FAErBC,QAAQC,IAAIN,8CAAYC,mBACxBI,QAAQC,IAAIV,EAAQ,IAAUC,UAE1B,yBAAKU,QAAQ,UAET,kBAACd,EAAD,CACIe,KAAM,CACN,CACEC,KAAK,gBACLC,IAAI,CAAC,WACLC,IAAI,CAAC,YACLC,KAAM,MACNC,KAAK,UACLC,OAAQ,CACNC,KAAK,IAEPC,KAAK,WACLC,UAAU,SAGZC,OAAQ,CAACC,MAAO,IACPC,OAAQ,IACPC,UAAU,UACVC,OAAQ,CACNC,QAAQ,EACRC,OAAQ,CACNd,IAAI,GACJC,KAAK,IAEPc,MAAM,EACNC,KAAK,EACLC,MAAM,QACNC,YAAY,GAEdC,MAAO,iB,GAvCSC,e,qOCK3BC,EAVf,iLAEE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,WAJN,GAAyBF,aCQLG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCVNC,EAAMC,SAASC,QAAU,yBACzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0e14a511.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Plotly from 'plotly.js-mapbox-dist'\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nconst Plot = createPlotlyComponent(Plotly);\r\nrequire('dotenv').config({path: __dirname + '/.env'});\r\n\r\nconst API_KEY = process.env.REACT_APP_MAP_KEY;\r\n\r\n\r\nexport default class AllArtistMap extends Component {\r\n  render() {\r\n    Plotly.setPlotConfig({\r\n      mapboxAccessToken: 'pk.eyJ1IjoibW9seW5lZCIsImEiOiJjanppcHc0cHkwMTdpM2RtenJncTJ1anFlIn0.dR3SV6IYSxK0VIAo3qyKuA' \r\n    })\r\n    console.log(process.env.REACT_APP_MAP_KEY)\r\n    console.log(require('dotenv').config())\r\n    return (\r\n        <div justify=\"center\"> \r\n        \r\n            <Plot\r\n                data={[\r\n                {\r\n                  type:'scattermapbox',\r\n                  lat:['45.5017'],\r\n                  lon:['-73.5673'],\r\n                  name: 'Dog',\r\n                  mode:'markers',\r\n                  marker: {\r\n                    size:14\r\n                  },\r\n                  text:'Montreal',\r\n                  hoverinfo:'text'\r\n                },\r\n                ]}\r\n                layout={{width: 2000,\r\n                         height: 1000,\r\n                          hovermode:'closest',\r\n                          mapbox: {\r\n                            bearing:0,\r\n                            center: {\r\n                              lat:45,\r\n                              lon:-73\r\n                            },\r\n                            pitch:0,\r\n                            zoom:5,\r\n                            style:'light',\r\n                            showlegend: true,\r\n                          }, \r\n                          title: 'A Plot'}}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport AllArtistMap from './components/allArtistMap';\n\nexport class App extends Component {\n  render() {\n  return (\n    <div className=\"App\">\n      <AllArtistMap/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from \"axios\"; \n// import config;\n\naxios.defaults.baseURL = 'http://127.0.0.1:5000/'\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}